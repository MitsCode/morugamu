#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1408 0 28 3 21 #"#lang scribble/manual"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"require"
0 0 24 3 1 #"["
0 0 14 3 11 #"racket/list"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 5 #"title"
0 0 24 3 1 #"{"
0 0 20 3 8 #"Morugamu"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 32 #"Welcome to the Morugamu project."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 10 #"Philosophy"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 72
(
 #"What are we doing here?  There are lots of ways to answer that quest"
 #"ion."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"One answer is that we're making a board game, and we're using Racket"
 #" to help."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 136
(
 #"Another answer is that we're creating a new programming language -- "
 #"one whose runtime environment is a table top and a human \"computer."
 #"\""
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 214
(
 #"Another answer is that we're trying to change the way computer scien"
 #"ce is taught -- by starting with the mathematical/algebraic basics t"
 #"hat often get missed in traditional education (even at the universit"
 #"y level!)."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 342
(
 #"Another answer is that we're trying to provide a fun context for lea"
 #"rning advanced concepts such as: pattern matching, higher-order func"
 #"tions, recursion, interpretation, macros/compilation, functional pro"
 #"gramming, immutable data, formal systems, the lambda calculus, autom"
 #"ated theorem proving, inductive reasoning, algebraic types, and so o"
 #"n."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 178
(
 #"Another answer is that we're trying to make a game where you don't h"
 #"ave to understand any of the above concepts to have fun.  They are a"
 #"ll there, hidden just beneath the surface."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 88
(
 #"Another answer is that we're trying to get a product into stores by "
 #"Christmas this year."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 158
(
 #"Another answer is that we're trying to create a teaching tool that w"
 #"orks without computers and that can be used in any school or coffee "
 #"shop around the world."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 108
(
 #"Another answer is that we're trying to create something that perfect"
 #"ly blends two things: fun and education."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 154
(
 #"And so on.   There are lots of ways to think about this project.  Al"
 #"l in all, though, I'm excited about making a change in the world.  I"
 #" hope you are too!"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 18 #"~Stephen R. Foster"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 8 #"API Docs"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 113
(
 #"Remember that you can think of Morugamu as either a game or a progra"
 #"mming language.  Here's the mapping of ideas:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"itemlist"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 37 #"Identifiers      = Symbols/Emojis/etc"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 47 #"Function named F = All Rule Cards with Symbol F"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 32 #"Expression       = A Puzzle Card"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 45 #"Library          = A collection of rule cards"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 63
#"Program          = A collection of rule cards and a puzzle card"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 27 #"Runtime          = Playtime"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 28 #"Interpreter      = Metarules"
0 0 24 3 2 #"}]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 199
(
 #"(Side note: this programming language is roughly isomorphic to the L"
 #"isp-family language called Scheme.  There are just a couple of small"
 #" differences: the use of icons and the patternmatching rules.) "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 129
(
 #"This repository separates some of the above concerns into different "
 #"files. (This will definitely change as the repository grows.)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 8 #"itemlist"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 40 #"How things look: see the \"themes\" folder"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 85
(
 #"Library definitions: see files like boolean-algebra-cards.rkt in the"
 #" top-level folder"
) 0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          @"
0 0 14 3 4 #"item"
0 0 24 3 1 #"{"
0 0 20 3 33 #"Puzzles: see the \"puzzles\" folder"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 4 #"Util"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 86
(
 #"As with any project, there are some functions that are so useful tha"
 #"t they can be used"
) 0 0 24 29 1 #"\n"
0 0 20 3 95
(
 #"in a variety of contexts.  This section of the docs is reserved for "
 #"these low-level, high-value"
) 0 0 24 29 1 #"\n"
0 0 20 3 10 #"functions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 16 #"example-function"
0 0 24 3 2 #" ["
0 0 14 3 6 #"param1"
0 0 24 3 1 #" "
0 0 14 3 12 #"param1-type?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 6 #"param2"
0 0 24 3 1 #" "
0 0 14 3 12 #"param2-type?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 12 #"output-type?"
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 79
(
 #"This is a fake function.  It's just there to help you document other"
 #" functions."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"safe-1"
0 0 24 3 2 #" ["
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 10 #"procedure?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 10 #"procedure?"
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 94
(
 #"This makes a function that normally requires 2 arguments to be safe "
 #"for calling on 1 argument."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 38 #"For example, this is usually an error:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"beside"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 21 #"This is not an error:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  (("
0 0 14 3 6 #"safe-1"
0 0 24 3 1 #" "
0 0 14 3 6 #"beside"
0 0 24 3 3 #") ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 46 #"This is most useful in conjunction with apply:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 24 3 2 #" ("
0 0 14 3 6 #"safe-1"
0 0 24 3 1 #" "
0 0 14 3 6 #"beside"
0 0 24 3 2 #") "
0 0 14 3 14 #"list-of-images"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 87
(
 #"You now don't have to worry about handling the case when the list ha"
 #"s only one element."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 8 #"split-by"
0 0 24 3 2 #" ["
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 3 #"] ["
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"of"
0 0 24 3 1 #" "
0 0 14 3 6 #"lists?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 20 3 134
(
 #"The split-by function takes in a list and splits it into sublists of"
 #" n. If there is a remainder, the remainder will be put in sublist."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 109
(
 #"Let's say you have a list of 6 letters, and you want to split it int"
 #"o sublists of three letters. Here's how: "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"split-by"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 36 #"This would return '((a b c) (d e f))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 108
(
 #"Let's say you have a list of 5 letters, and you want to split it int"
 #"o sublists of three letters. Here's how:"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"split-by"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 34 #"This would return '((a b c) (d e))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 15 #"pair-with-index"
0 0 24 3 2 #" ["
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 222
(
 #"This takes in a list of puzzle card images and assigns an index to e"
 #"ach of them. The index isn't added to the card itself as an image bu"
 #"t a list of lists is made with each sublist containing the image and"
 #" the index number."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 15 #"pair-with-index"
0 0 24 3 2 #" ["
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 200
(
 #"This takes in a list and assigns an index to each of them. The index"
 #" isn't added to the card itself as an image but a list of lists is m"
 #"ade with each sublist containing the image and the index number."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 185
(
 #"For example, if a list of puzzle cards were inputted into this funct"
 #"ion, a list of lists would be produced in that each sublist would co"
 #"ntain the puzzle card with its respective index. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 23 #"expression->puzzle-card"
0 0 24 3 2 #" ["
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"puzzle-card?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 114
(
 #"This takes in an expression then calls the puzzle-card function. It "
 #"creates a puzzle card based on the expression."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 103
(
 #"For example, let's say you call the expression->puzzle-card function"
 #" with a boolean algebra expression."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"expression->puzzle-card"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 2 #") "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 37 #"Or, try using a different expression:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 23 #"expression->puzzle-card"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 1 #"T"
0 0 24 3 1 #" "
0 0 14 3 1 #"F"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 170
(
 #"Either function call will create puzzle cards. Different puzzle card"
 #"s will be created based on the different boolean algebra expressions"
 #" that are input into the function."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 12 #"Rule Systems"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"require"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool:"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"../rule-systems/boolean-algebra-cards.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"require"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool:"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"../themes/emoji-boolean-algebra.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 6 #"define"
0 0 24 3 1 #"["
0 0 14 3 8 #"ba-cards"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bool:render"
0 0 24 3 1 #" "
0 0 14 3 10 #"bool:theme"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 28 #"A rule card looks like this:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 6 #"second"
0 0 24 3 1 #"["
0 0 14 3 8 #"ba-cards"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 144
(
 #"Each of the symbols used in the ru"
 #"le card needs to be defined as a \"tile.\"  Then the rule card can b"
 #"e constructed by specifying a list of rules."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 18 #"Here's an example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 6 #"Import"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"./card-designs.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 19 3 13 #"\"./rules.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 58
#"Let's suppose we wanted to create the following rule card:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"rule-card"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"'1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"S"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 2 #"'2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 114
(
 #"Note that each of the four unique symbols above would need to be def"
 #"ined before this rule card can be constructed:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 11 #"define-tile"
0 0 24 3 1 #" "
0 0 14 3 13 #"the-successor"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 1 #"S"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 11 #"define-tile"
0 0 24 3 1 #" "
0 0 14 3 5 #"the-0"
0 0 24 3 2 #"  "
0 0 21 3 2 #"'0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 11 #"define-tile"
0 0 24 3 1 #" "
0 0 14 3 5 #"the-1"
0 0 24 3 2 #"  "
0 0 21 3 2 #"'1"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 11 #"define-tile"
0 0 24 3 1 #" "
0 0 14 3 5 #"the-2"
0 0 24 3 2 #"  "
0 0 21 3 2 #"'2"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 88
(
 #"This specifies that the tiles for S, 0, 1, and 2 are each a differen"
 #"t color of circle.  "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 208
(
 #"Usually, you'll not need to specify images this way, though.  Most r"
 #"ule cards are part of a set of rules that define some kind of mathem"
 #"atically interesting system (e.g. boolean algebra or arithmetic).  T"
 #"hese"
) 0 0 24 29 1 #"\n"
0 0 20 3 191
(
 #"cards will often share the same symbols and theme.  Such sets of car"
 #"ds (or \"libraries\" if you prefer the programming language terminol"
 #"ogy) are defined in files like boolean-algebra-cards.rkt."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 15 3 11 #"define-tile"
0 0 24 3 2 #" ["
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #"]) "
0 0 14 3 5 #"void?"
0 0 24 3 2 #"]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 76
(
 #"Here's an example of creating a define-tile card and linking it to a"
 #"n image:"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 11 #"define-tile"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"<"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"bitmap"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"./themes/emojis/LessThan.png\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 4 #"rule"
0 0 24 3 2 #" ["
0 0 14 3 7 #"ruleVar"
0 0 24 3 2 #" ("
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 8 #"function"
0 0 24 3 1 #" "
0 0 14 3 3 #"out"
0 0 24 3 5 #"))])("
0 0 14 3 5 #"rule?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 55
#"Here\342\200\231s an example of creating a rule for a rule card:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 9 #"rule-card"
0 0 24 3 2 #" ["
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"image"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 20 3 73
(
 #"Here\342\200\231s an example of creating a rule card for the boolean"
 #" algebra card:"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #" @"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rule-card"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 71
(
 #"We now examine the various rule systems that have already been creat"
 #"ed:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 15 #"Boolean Algebra"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 98
(
 #"The convention in when implementing these rule systems is to export "
 #"a render function that takes a"
) 0 0 24 29 1 #"\n"
0 0 20 3 87
(
 #"theme and returns a list of images (a printable symbol sheet and pri"
 #"ntable rule cards)."
) 0 0 24 29 1 #"\n"
0 0 20 3 80
(
 #"The theme can be easily changed as we explore different art styles f"
 #"or the game."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 136
(
 #"Here's an example of importing the boolean algebra rules, along with"
 #" a theme, and rendering out those rule cards according to the theme:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool:"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"../boolean-algebra-cards.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 5 #"bool:"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"../themes/emoji-boolean-algebra.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"boolean-algebra"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"bool:render"
0 0 24 3 1 #" "
0 0 14 3 10 #"bool:theme"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 58
#"Note the use of the render function.  Here's how it works:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ["
0 0 14 3 5 #"theme"
0 0 24 3 1 #" "
0 0 14 3 6 #"theme?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 83
(
 #"This returns a list of images for the tiles and rule cards for the b"
 #"oolean algebra."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 13 #"Clock Numbers"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ["
0 0 14 3 5 #"theme"
0 0 24 3 1 #" "
0 0 14 3 6 #"theme?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 88
(
 #"This returns a list of images for the tiles and rule cards for the c"
 #"lock numbers system."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 12 #"Inequalities"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 72
(
 #"Inequalities is implemented on top of boolean algebra and clock numb"
 #"ers."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ["
0 0 14 3 5 #"theme"
0 0 24 3 1 #" "
0 0 14 3 6 #"theme?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 87
(
 #"This returns a list of images for the tiles and rule cards for the i"
 #"nequalities system."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 5 #"Lists"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ["
0 0 14 3 5 #"theme"
0 0 24 3 1 #" "
0 0 14 3 6 #"theme?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 85
(
 #"This returns a list of images for the tiles and rule cards for the l"
 #"ist rules system."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 15 #"Clock++ Numbers"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 6 #"render"
0 0 24 3 2 #" ["
0 0 14 3 5 #"theme"
0 0 24 3 1 #" "
0 0 14 3 6 #"theme?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 89
(
 #"This returns a list of images for the tiles and rule cards for the c"
 #"lock++ number system."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 7 #"Puzzles"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 189
(
 #"As rule systems are created (see above), puzzles can be created. Puz"
 #"zles help challenge your understanding of the rule cards and require"
 #" you to simplify multiple tiles into one single tile."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 95
(
 #"A puzzle is equivalent to some expression that can be evaluated acco"
 #"rding to some set of rules."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 76
(
 #"This section of the docs documents the tools available for creating "
 #"puzzles."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 16 #"TODO: Doc this.."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 20 3 44 #"Here's an example of creating a puzzle card:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"puzzle-card"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"T"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 62
#"Note the use of the puzzle-card function. Here's how it works:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 11 #"puzzle-card"
0 0 24 3 2 #" ["
0 0 14 3 4 #"rule"
0 0 24 3 1 #" "
0 0 14 3 5 #"rule?"
0 0 24 3 4 #"]) ("
0 0 14 3 5 #"image"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 8 #"Printing"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 77
(
 #"As rule systems and puzzles are created (see above), they need to be"
 #" printed."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 92
(
 #"With more and more printable materials, the need to automate things "
 #"like page numberings and"
) 0 0 24 29 1 #"\n"
0 0 20 3 95
(
 #"page layouts becomes more and more important.  This section document"
 #"s the tools that facilitate"
) 0 0 24 29 1 #"\n"
0 0 20 3 22 #"these kinds of things."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 10 #"number-all"
0 0 24 3 2 #" ["
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 217
(
 #"This takes in a list of images (i.e. puzzle cards) and numbers them "
 #"starting from one.  It produces a list of the same images, each with"
 #" its corresponding number now placed at the top right corner.       "
 #"             "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 11 #"save-sheets"
0 0 24 3 2 #" ["
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"         ()]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 166
(
 #"This function uses a list of sheet images and saves them recursively"
 #". If num is less than the length of the list, the function is called"
 #" again and num is incremented."
) 0 0 24 29 1 #"\n"
0 0 20 3 113
(
 #"Num is part of the file name. This function lets us save multiple fi"
 #"les with different names without randomizing."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 13 #"my-save-image"
0 0 24 3 2 #" ["
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #"] ["
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"         ()]{"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 84
(
 #"This function takes in an image and a number and saves it as \"sheet"
 #"\" + num + \".png\"."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 19 #"Here's an example: "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 11 #"racketblock"
0 0 24 3 1 #"["
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"my-save-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"img"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 20 3 42 #"This would save the circle as \"sheet3.png\""
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 12 #"cards->pages"
0 0 24 3 2 #" ["
0 0 14 3 13 #"list_of_cards"
0 0 24 3 1 #" "
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"images?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 104
(
 #"This function takes a list of images and turns them into a list of p"
 #"ages that contains 9 or less images."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 13 #"9images->page"
0 0 24 3 2 #" ["
0 0 14 3 14 #"list_of_images"
0 0 24 3 1 #" "
0 0 14 3 6 #"listof"
0 0 24 3 1 #" "
0 0 14 3 7 #"images?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"image?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 68
#"This function turns a list of 9 card images into an image of a page."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 7 #"section"
0 0 24 3 1 #"{"
0 0 20 3 15 #"Market Research"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 98
(
 #"There's a set of tools we're building for examining the success of o"
 #"ther board games and companies"
) 0 0 24 29 1 #"\n"
0 0 20 3 42 #"on the Kickstarter crowd funding platform."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 20 3 95
(
 #"We have a dataset for board games and for companies and various quer"
 #"y functions for slicing the"
) 0 0 24 29 1 #"\n"
0 0 20 3 62
#"data in various ways.  The docs for those functions are below:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 14 3 10 #"subsection"
0 0 24 3 1 #"{"
0 0 20 3 18 #"Database Utilities"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"@"
0 0 15 3 7 #"defproc"
0 0 24 3 2 #"[("
0 0 14 3 15 #"data->histogram"
0 0 24 3 2 #" ["
0 0 14 3 11 #"data-vector"
0 0 24 3 1 #" "
0 0 14 3 7 #"listof-"
0 0 14 3 7 #"vector?"
0 0 24 3 3 #"] ["
0 0 14 3 8 #"skip-num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"x-min"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 7 #"string?"
0 0 24 3 3 #"] ["
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 3 #"] ["
0 0 14 3 10 #"line-color"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 19 #"discrete-histogram?"
0 0 24 3 3 #")]{"
0 0 24 29 1 #"\n"
0 0 20 3 4 #"This"
0 0 20 3 1 #" "
0 0 20 3 8 #"function"
0 0 20 3 1 #" "
0 0 20 3 7 #"returns"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 8 #"discrete"
0 0 20 3 1 #" "
0 0 20 3 9 #"histogram"
0 0 20 3 1 #" "
0 0 20 3 2 #"to"
0 0 20 3 1 #" "
0 0 20 3 4 #"plot"
0 0 20 3 1 #","
0 0 20 3 1 #" "
0 0 20 3 4 #"when"
0 0 20 3 1 #" "
0 0 20 3 5 #"given"
0 0 20 3 1 #" "
0 0 20 3 1 #"a"
0 0 20 3 1 #" "
0 0 20 3 4 #"list"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 7 #"vectors"
0 0 20 3 1 #" "
0 0 20 3 4 #"plus"
0 0 20 3 1 #" "
0 0 20 3 5 #"other"
0 0 20 3 6 #" info."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"}"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
